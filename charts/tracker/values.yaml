# Default values for tracker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: depscloud/tracker
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: Headless
  port: 8090

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

tls:
  secretName: ""

externalStorage:
  secretRef:
    name: ""
  configMapRef:
    name: ""

storage:
  address: file::memory:?cache=shared
  driver: sqlite
  readOnlyAddress:
  statements:
#    createGraphDataTable: |
#      CREATE TABLE IF NOT EXISTS dts_graphdata(
#          graph_item_type VARCHAR(55),
#          k1 CHAR(64),
#          k2 CHAR(64),
#          encoding TINYINT,
#          graph_item_data TEXT,
#          last_modified DATETIME,
#          date_deleted DATETIME DEFAULT NULL,
#          PRIMARY KEY (graph_item_type, k1, k2)
#      );
#
#    insertGraphData: |
#      REPLACE INTO dts_graphdata
#      (graph_item_type, k1, k2, encoding, graph_item_data, last_modified, date_deleted)
#      VALUES (:graph_item_type, :k1, :k2, :encoding, :graph_item_data, :last_modified, NULL);
#
#    deleteGraphData: |
#      UPDATE dts_graphdata
#      SET date_deleted = :date_deleted
#      WHERE (graph_item_type = :graph_item_type and k1 = :k1 and k2 = :k2);
#
#    listGraphData: |
#      SELECT graph_item_type, k1, k2, encoding, graph_item_data
#      FROM dts_graphdata
#      WHERE graph_item_type = :graph_item_type
#      LIMIT :limit OFFSET :offset;
#
#    selectGraphDataUpstreamDependencies: |
#      SELECT g1.graph_item_type, g1.k1, g1.k2, g1.encoding, g1.graph_item_data,
#              g2.graph_item_type, g2.k1, g2.k2, g2.encoding, g2.graph_item_data
#      FROM dts_graphdata AS g1
#      INNER JOIN dts_graphdata AS g2 ON g1.k1 = g2.k2
#      WHERE g2.k1 = :key
#      AND g2.graph_item_type IN (:edge_types)
#      AND g2.k1 != g2.k2
#      AND g2.date_deleted IS NULL
#      AND g1.k1 = g1.k2
#      AND g1.date_deleted IS NULL;
#
#    selectGraphDataDownstreamDependencies: |
#      SELECT g1.graph_item_type, g1.k1, g1.k2, g1.encoding, g1.graph_item_data,
#              g2.graph_item_type, g2.k1, g2.k2, g2.encoding, g2.graph_item_data
#      FROM dts_graphdata AS g1
#      INNER JOIN dts_graphdata AS g2 ON g1.k2 = g2.k1
#      WHERE g2.k2 = :key
#      AND g2.graph_item_type IN (:edge_types)
#      AND g2.k1 != g2.k2
#      AND g2.date_deleted IS NULL
#      AND g1.k1 = g1.k2
#      AND g1.date_deleted IS NULL;
